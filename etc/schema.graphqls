# Mageplaza
#
# NOTICE OF LICENSE
#
# This source file is subject to the Mageplaza.com license that is
# available through the world-wide-web at this URL:
# https://www.mageplaza.com/LICENSE.txt
#
# DISCLAIMER
#
# Do not edit or add to this file if you wish to upgrade this extension to newer
# version in the future.
#
# @category    Mageplaza
# @package     Mageplaza_BlogGraphQl
# @copyright   Copyright (c) Mageplaza (https://www.mageplaza.com/)
# @license     https://www.mageplaza.com/LICENSE.txt

type Query {
    mpBlogPosts(
        action: String! @doc(description: "Action in query.")
        filter: PostsFilterInput @doc(description: "Identifies which product attributes to search for and return.")
        authorName: String @doc(description: "Author's name use in the filter. Apply when action is get_post_by_authorName.")
        tagName: String @doc(description: "Tag's name use in the filter. Apply when action is get_post_by_tagName.")
        topicId: Int @doc(description: "Topic's Id use in the filter. Apply when action is get_post_by_topic.")
        categoryId: Int @doc(description: "Category's Id use in the filter. Apply when action is get_post_by_categoryId.")
        categoryKey: String @doc(description: "Category's key use in the filter. Apply when action is get_post_by_categoryKey.")
        postId: Int @doc(description: "Post's Id use in the filter. Apply when action is get_related_post.")
        pageSize: Int = 10 @doc(description: "How many items should show on the page.")
        currentPage: Int = 1 @doc(description: "Allows to using paging it start with 1.")
        sortBy: String @doc(description: "Sort By 'Popular' or 'Latest' of the post.")
    ):PostsOutput @resolver(class: "\\Mageplaza\\BlogGraphQl\\Model\\Resolver\\Posts") @doc(description: "The mpBlogPosts query searches for post that match the criteria specified in the filter.")
    mpBlogTags(
        filter: TagsFilterInput @doc(description: "Identifies which product attributes to search for and return.")
        pageSize: Int = 10 @doc(description: "How many items should show on the page.")
        currentPage: Int = 1 @doc(description: "Allows to using paging it start with 1.")
    ):TagsOutput @resolver(class: "\\Mageplaza\\BlogGraphQl\\Model\\Resolver\\Tags") @doc(description: "The mpBlogTags query searches for tag that match the criteria specified in the filter.")
    mpBlogTopics(
        filter: TopicsFilterInput @doc(description: "Identifies which product attributes to search for and return.")
        pageSize: Int = 10 @doc(description: "How many items should show on the page.")
        currentPage: Int = 1 @doc(description: "Allows to using paging it start with 1.")
    ):TopicsOutput @resolver(class: "\\Mageplaza\\BlogGraphQl\\Model\\Resolver\\Topics") @doc(description: "The mpBlogTopics query searches for topic that match the criteria specified in the filter.")
    mpBlogCategories(
        action: String! @doc(description: "Action in query.")
        filter: CategoriesFilterInput @doc(description: "Identifies which product attributes to search for and return.")
        postId: Int @doc(description: "Post's Id use in the filter. Apply when action is get_category_by_postId.")
        pageSize: Int = 10 @doc(description: "How many items should show on the page.")
        currentPage: Int = 1 @doc(description: "Allows to using paging it start with 1.")
    ):CategoriesOutput @resolver(class: "\\Mageplaza\\BlogGraphQl\\Model\\Resolver\\Categories") @doc(description: "The mpBlogCategories query searches for Category that match the criteria specified in the filter.")
    mpBlogComments(
        filter: CommentsFilterInput @doc(description: "Identifies which product attributes to search for and return.")
        pageSize: Int = 10 @doc(description: "How many items should show on the page.")
        currentPage: Int = 1 @doc(description: "Allows to using paging it start with 1.")
    ):CommentsOutput @resolver(class: "\\Mageplaza\\BlogGraphQl\\Model\\Resolver\\Comments") @doc(description: "The mpBlogComments query searches for Category that match the criteria specified in the filter.")
    mpBlogPostLikes(
        postId: Int @doc(description: "Post's Id use in the filter.")
    ):LikesOutput @resolver(class: "\\Mageplaza\\BlogGraphQl\\Model\\Resolver\\Likes") @doc(description: "Returns the total number of likes for the post")
    mpBlogProducts(
        filter: ProductsFilterInput @doc(description: "Identifies which product attributes to search for and return.")
        postId: Int @doc(description: "Post's Id use in the filter.")
        pageSize: Int = 10 @doc(description: "How many items should show on the page.")
        currentPage: Int = 1 @doc(description: "Allows to using paging it start with 1.")
    ):ProductsOutput @resolver(class: "\\Mageplaza\\BlogGraphQl\\Model\\Resolver\\Products") @doc(description: "The mpBlogProducts query searches for Category that match the criteria specified in the filter.")
    mpBlogConfigs(
        storeId: Int @doc(description: "Store Id use in the filter.")
    ):ConfigsOutput @resolver(class: "\\Mageplaza\\BlogGraphQl\\Model\\Resolver\\Config") @doc(description: "The mpBlogConfigs query gets the config of Blog extension.")
    mpBlogMonthlyArchive(
        storeId: Int @doc(description: "Store Id use in the filter.")
        monthly: Int @doc(description: "Monthly use in the filter.")
        year: Int @doc(description: "Year use in the filter.")
    ):MonthlyArchiveOutput @resolver(class: "\\Mageplaza\\BlogGraphQl\\Model\\Resolver\\MonthlyArchive") @doc(description: "The mpBlogMonthlyArchive query gets posts follow monthly archive.")
}

input PostsFilterInput {
    name: FilterTypeInput  @doc(description: "The post name. Customers use this name to identify the post."),
    post_id: FilterTypeInput  @doc(description: "The post id. Customers use this name to identify the post."),
    store_ids: FilterTypeInput  @doc(description: "The store id"),
    enabled: FilterTypeInput  @doc(description: "Enabled"),
    url_key: FilterTypeInput  @doc(description: "The post url_key"),
    allow_comment: FilterTypeInput  @doc(description: "Indicates whether the post allow comment"),
    created_at: FilterTypeInput  @doc(description: "Timestamp indicating when the post was created"),
    updated_at: FilterTypeInput  @doc(description: "Timestamp indicating when the post was updated"),
    author_id: FilterTypeInput  @doc(description: "Author Id the post belongs to."),
    import_source: FilterTypeInput  @doc(description: "Import Source"),
    publish_date: FilterTypeInput  @doc(description: "Timestamp indicating when the post was publish")
}

input TagsFilterInput {
    name: FilterTypeInput  @doc(description: "The tag name. Customers use this name to identify the tag."),
    tag_id: FilterTypeInput  @doc(description: "The tag id. Customers use this name to identify the tag."),
    store_ids: FilterTypeInput  @doc(description: "The store id"),
    enabled: FilterTypeInput  @doc(description: "Enabled"),
    url_key: FilterTypeInput  @doc(description: "The tag url_key"),
    created_at: FilterTypeInput  @doc(description: "Timestamp indicating when the tag was created"),
    updated_at: FilterTypeInput  @doc(description: "Timestamp indicating when the tag was updated"),
    import_source: FilterTypeInput  @doc(description: "Import Source")
}

input TopicsFilterInput {
    name: FilterTypeInput  @doc(description: "The topic name. Customers use this name to identify the topic."),
    topic_id: FilterTypeInput  @doc(description: "The topic id. Customers use this name to identify the topic."),
    store_ids: FilterTypeInput  @doc(description: "The store id"),
    enabled: FilterTypeInput  @doc(description: "Enabled"),
    url_key: FilterTypeInput  @doc(description: "The topic url_key"),
    created_at: FilterTypeInput  @doc(description: "Timestamp indicating when the topic was created"),
    updated_at: FilterTypeInput  @doc(description: "Timestamp indicating when the topic was updated"),
    import_source: FilterTypeInput  @doc(description: "Import Source")
}

input CategoriesFilterInput {
    name: FilterTypeInput  @doc(description: "The category name. Customers use this name to identify the category."),
    category_id: FilterTypeInput  @doc(description: "The category id. Customers use this name to identify the category."),
    parent_id: FilterTypeInput  @doc(description: "The parent category id. Customers use this name to identify the category."),
    store_ids: FilterTypeInput  @doc(description: "The Store Id"),
    position: FilterTypeInput  @doc(description: "The Category Position"),
    level: FilterTypeInput  @doc(description: "The Category Level"),
    enabled: FilterTypeInput  @doc(description: "Enabled"),
    url_key: FilterTypeInput  @doc(description: "The Category url_key"),
    created_at: FilterTypeInput  @doc(description: "Timestamp indicating when the category was created"),
    updated_at: FilterTypeInput  @doc(description: "Timestamp indicating when the category was updated"),
    import_source: FilterTypeInput  @doc(description: "Import Source")
}

input CommentsFilterInput {
    comment_id: FilterTypeInput  @doc(description: "The comment id. Customers use this name to identify the comment."),
    post_id: FilterTypeInput  @doc(description: "Post Id the comment belongs to."),
    entity_id: FilterTypeInput  @doc(description: "Customer Id the comment belongs to"),
    has_reply: FilterTypeInput  @doc(description: "Indicates whether the comment has reply"),
    is_reply: FilterTypeInput  @doc(description: "Indicates whether the comment is reply"),
    reply_id: FilterTypeInput  @doc(description: "Reply Id"),
    status: FilterTypeInput  @doc(description: "Comment Status"),
    store_ids: FilterTypeInput  @doc(description: "Store Id"),
    user_name: FilterTypeInput  @doc(description: "User Name"),
    user_email: FilterTypeInput  @doc(description: "User Email"),
    updated_at: FilterTypeInput  @doc(description: "Timestamp indicating when the comment was updated"),
    import_source: FilterTypeInput  @doc(description: "Import Source")
}

input ProductsFilterInput {
    type_id: FilterTypeInput  @doc(description: "Product Type the product belongs to"),
    attribute_set_id: FilterTypeInput  @doc(description: "Product Attribute Set Id the product belongs to"),
    entity_id: FilterTypeInput  @doc(description: "Product Id"),
    sku: FilterTypeInput  @doc(description: "A number or code assigned to a product to identify the product, options, price, and manufacturer"),
    has_options: FilterTypeInput  @doc(description: "Indicates whether additional attributes have been created for the product"),
    required_options: FilterTypeInput  @doc(description: "Indicates whether the product has required options"),
    updated_at: FilterTypeInput  @doc(description: "Timestamp indicating when the product was updated"),
    created_at: FilterTypeInput  @doc(description: "Timestamp indicating when the product was created")
}

type PostsOutput {
    total_count: Int @doc(description: "The number of posts returned"),
    items: [Post] @doc(description: "An array of post that match the specified search criteria")
    pageInfo: PageInfo @doc(description: "An object that includes the page_info and currentPage values specified in the query")
}

type PostsOutputNoPage {
    total_count: Int @doc(description: "The number of posts returned"),
    items: [Post] @doc(description: "An array of post that match the specified search criteria")
}

type PageInfo {
    pageSize: Int @doc(description: "How many items should show on the page.")
    currentPage: Int @doc(description: "Allows to using paging it start with 1.")
    hasNextPage: Boolean @doc(description: "Is next page")
    hasPreviousPage: Boolean @doc(description: "Is previous page")
    startPage: Int @doc(description: "Start page")
    endPage: Int @doc(description: "End page")
}

type LikesOutput {
    total: Int @doc(description: "The total like")
}

type ProductsOutput {
    total_count: Int @doc(description: "The number of products returned"),
    items: [Product] @doc(description: "An array of products that match the specified search criteria")
    pageInfo: PageInfo @doc(description: "An object that includes the page_info and currentPage values specified in the query")
}

type ProductsOutputNoPage {
    total_count: Int @doc(description: "The number of products returned"),
    items: [Product] @doc(description: "An array of products that match the specified search criteria")
}

type TagsOutput {
    total_count: Int @doc(description: "The number of tags returned"),
    items: [Tag] @doc(description: "An array of tags that match the specified search criteria")
    pageInfo: PageInfo @doc(description: "An object that includes the page_info and currentPage values specified in the query")
}

type TagsOutputNoPage {
    total_count: Int @doc(description: "The number of tags returned"),
    items: [Tag] @doc(description: "An array of tags that match the specified search criteria")
}

type TopicsOutput {
    total_count: Int @doc(description: "The number of topics returned"),
    items: [Topic] @doc(description: "An array of topics that match the specified search criteria")
    pageInfo: PageInfo @doc(description: "An object that includes the page_info and currentPage values specified in the query")
}

type TopicsOutputNoPage {
    total_count: Int @doc(description: "The number of topics returned"),
    items: [Topic] @doc(description: "An array of topics that match the specified search criteria")
}

type CategoriesOutput {
    total_count: Int @doc(description: "The number of categories returned"),
    items: [Category] @doc(description: "An array of categories that match the specified search criteria")
    pageInfo: PageInfo @doc(description: "An object that includes the page_info and currentPage values specified in the query")
}

type CategoriesOutputNoPage {
    total_count: Int @doc(description: "The number of categories returned"),
    items: [Category] @doc(description: "An array of categories that match the specified search criteria")
}

type CommentsOutput {
    total_count: Int @doc(description: "The number of comments returned"),
    items: [Comment] @doc(description: "An array of comments that match the specified search criteria")
    pageInfo: PageInfo @doc(description: "An object that includes the page_info and currentPage values specified in the query")
}

type Post {
    post_id: Int @doc(description: "An ID that uniquely identifies the post."),
    name: String @doc(description: "The name of the post."),
    short_description: String @doc(description: "The short description of the post."),
    post_content: String @doc(description: "The content of the post."),
    store_ids: String @doc(description: "An ID that identifies the store."),
    image: String @doc(description: "The image of the post."),
    enabled: Int @doc(description: "Indicates whether a post is enabled."),
    url_key: String @doc(description: "The url key of the post."),
    author_url: String @doc(description: "The full url of the author."),
    author_url_key: String @doc(description: "The url key of the author."),
    author_name: String @doc(description: "The name of the author."),
    view_traffic: Int @doc(description: "The view count of the post."),
    in_rss: Int @doc(description: "Indicates whether a post in rss."),
    allow_comment: Int @doc(description: "Indicates whether users can write a comment."),
    meta_title: String @doc(description: "The meta title of the post."),
    meta_keywords: String @doc(description: "The meta keywords of the post."),
    meta_description: String @doc(description: "The meta description of the post."),
    meta_robots: String @doc(description: "The meta robot of the post."),
    created_at: String @doc(description: "Timestamp indicating when the post was created."),
    updated_at: String @doc(description: "Timestamp indicating when the post was updated."),
    author_id: Int @doc(description: "An ID that identifies the author."),
    publish_date: String @doc(description: "Timestamp indicating when the post was publish."),
    import_source: String @doc(description: "The import source of the post."),
    layout: String @doc(description: "The layout of the post"),
    categories: CategoriesOutputNoPage @resolver(class: "Mageplaza\\BlogGraphQl\\Model\\Resolver\\Post\\Category") @doc(description: "The categories assigned to a post"),
    tags: TagsOutputNoPage @resolver(class: "Mageplaza\\BlogGraphQl\\Model\\Resolver\\Post\\Tag") @doc(description: "The tags assigned to a post"),
    topics: TopicsOutputNoPage @resolver(class: "Mageplaza\\BlogGraphQl\\Model\\Resolver\\Post\\Topic") @doc(description: "The topics assigned to a post"),
    products: ProductsOutputNoPage @resolver(class: "Mageplaza\\BlogGraphQl\\Model\\Resolver\\Post\\Product") @doc(description: "The products assigned to a post"),
    posts: PostsOutputNoPage @resolver(class: "Mageplaza\\BlogGraphQl\\Model\\Resolver\\Post\\Post")  @doc(description: "The related post assigned to a post")
}

type Tag {
    tag_id: Int @doc(description: "An ID that uniquely identifies the tag."),
    name: String @doc(description: "The name of the tag."),
    description: String @doc(description: "The description of the tag."),
    store_ids: String @doc(description: "An ID that identifies the store."),
    enabled: Int @doc(description: "Indicates whether a tag is enabled."),
    url_key: String @doc(description: "The url key of the tag."),
    meta_title: String @doc(description: "The meta title of the tag."),
    meta_keywords: String @doc(description: "The meta keywords of the tag."),
    meta_description: String @doc(description: "The meta description of the tag."),
    meta_robots: String @doc(description: "The meta robot of the tag."),
    created_at: String @doc(description: "Timestamp indicating when the tag was created."),
    updated_at: String @doc(description: "Timestamp indicating when the tag was updated."),
    import_source: String @doc(description: "The import source of the tag."),
    posts: PostsOutputNoPage @resolver(class: "Mageplaza\\BlogGraphQl\\Model\\Resolver\\Resolver\\Post") @doc(description: "The posts assigned to a tag")
}

type Topic {
    topic_id: Int @doc(description: "An ID that uniquely identifies the topic."),
    name: String @doc(description: "The name of the topic."),
    description: String @doc(description: "The description of the topic."),
    store_ids: String @doc(description: "An ID that identifies the store."),
    enabled: Int @doc(description: "Indicates whether a topic is enabled."),
    url_key: String @doc(description: "The url key of the topic."),
    meta_title: String @doc(description: "The meta title of the topic."),
    meta_keywords: String @doc(description: "The meta keywords of the topic."),
    meta_description: String @doc(description: "The meta description of the topic."),
    meta_robots: String @doc(description: "The meta robot of the topic."),
    created_at: String @doc(description: "Timestamp indicating when the topic was created."),
    updated_at: String @doc(description: "Timestamp indicating when the topic was updated."),
    import_source: String @doc(description: "The import source of the topic."),
    posts: PostsOutputNoPage @resolver(class: "Mageplaza\\BlogGraphQl\\Model\\Resolver\\Resolver\\Post") @doc(description: "The post assigned to a topic")
}

type Comment {
    comment_id: Int @doc(description: "An ID that uniquely identifies the comment."),
    post_id: Int @doc(description: "An ID that identifies the post."),
    entity_id: Int @doc(description: "An ID that identifies the customer."),
    has_reply: Int @doc(description: "Indicates whether a comment has replied."),
    is_reply: Int @doc(description: "Indicates whether a comment is replied."),
    content: String @doc(description: "The content of the comment."),
    created_at: String @doc(description: "Timestamp indicating when the comment was created."),
    status: Int @doc(description: "The status of the comment."),
    store_ids: String @doc(description: "An ID that identifies the store."),
    user_name: String @doc(description: "The name of the user."),
    user_email: String @doc(description: "The email of the user."),
    import_source: String @doc(description: "The import source of the comment.")
}

type Category {
    category_id: Int @doc(description: "An ID that uniquely identifies the category."),
    name: String @doc(description: "The name of the category."),
    url_key: String @doc(description: "The url key of the category."),
    description: String @doc(description: "The description of the category."),
    store_ids: String @doc(description: "An ID that identifies the store."),
    enabled: Int @doc(description: "Indicates whether a category is enabled."),
    meta_title: String @doc(description: "The meta title of the category."),
    meta_keywords: String @doc(description: "The meta keywords of the category."),
    meta_description: String @doc(description: "The meta description of the category."),
    meta_robots: String @doc(description: "The meta robot of the category."),
    parent_id: Int @doc(description: "An ID that identifies the parent category."),
    path: String @doc(description: "The path of the category."),
    position: Int @doc(description: "The position of the category."),
    level: Int @doc(description: "The level of the category."),
    children_count: Int @doc(description: "number of children categories."),
    created_at: String @doc(description: "Timestamp indicating when the category was created."),
    updated_at: String @doc(description: "Timestamp indicating when the category was updated."),
    import_source: String @doc(description: "The import source of the category."),
    posts: PostsOutputNoPage @resolver(class: "Mageplaza\\BlogGraphQl\\Model\\Resolver\\Resolver\\Post") @doc(description: "The post assigned to a category")
}

type Product {
    entity_id: Int @doc(description: "The ID number assigned to the product."),
    attribute_set_id: Int @doc(description: "The attribute set assigned to the product."),
    type_id: String @doc(description: "One of simple, virtual, bundle, downloadable, grouped, or configurable."),
    sku: String @doc(description: "A number or code assigned to a product to identify the product, options, price, and manufacturer."),
    url_key: String @doc(description: "The url key of the product."),
    images: [String] @doc(description: "The images of the product."),
    has_options: Int @doc(description: "Indicates whether a product option is available."),
    required_options: Int @doc(description: "Indicates whether a product option is required."),
    created_at: String @doc(description: "Timestamp indicating when the product was created."),
    updated_at: String @doc(description: "Timestamp indicating when the product was updated.")
}

type ConfigsOutput {
    general: General @doc(description: "General config."),
    sidebar: Sidebar @doc(description: "Sidebar config.")
    seo: Seo @doc(description: "Seo config.")
}

type General {
    name: String @doc(description: "Blog Name."),
    toplinks: Int @doc(description: "Show Blog Link in Top Menu."),
    display_author: Int @doc(description: "Display author."),
    display_style: Int @doc(description: "Display Blogs Mode."),
    font_color: String @doc(description: "Choose blog's color.")
}

type Sidebar {
    number_recent_posts: Int @doc(description: "Number of recent posts."),
    number_mostview_posts: Int @doc(description: "Number of most view posts.")
}

type Seo {
    meta_title: String @doc(description: "Meta title."),
    meta_description: String @doc(description: "Meta description."),
}

type MonthlyArchiveOutput {
    total_count: Int @doc(description: "The number of monthly archive returned"),
    items: [MonthlyArchive] @doc(description: "An array of post that match the specified search criteria.")
}

type MonthlyArchive {
    label: String @doc(description: "The label of Monthly Archive"),
    quantity: Int @doc(description: "The quantity of Monthly Archive"),
    items: [Post] @doc(description: "An array of post that match the specified search criteria.")
}
